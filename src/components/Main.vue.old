<script setup lang="ts">
import {ref} from "vue";
import axiosRequest from "../utils/axiosRequest.ts";
import router from "../router.ts";
import {showNotify} from "vant";
import '@/utils/base.ts';
import {onMounted, computed, watch} from "vue";

let activeType = ref(0)
let categoryList = ref([])
let categoryId = ref(undefined)
let dishList = ref([])
let cartData = ref([])
let dialogFlavor = ref({
  name: '',
  flavors: [],
  dishId: undefined,
  price: undefined,
  show: false,
  image: ''
})
let cartDialogShow = ref(false)
let detailsDialog = ref({
  show: false,
  item: {image: ''}
})
let setMealDialog = ref({
  show: false,
  item: {}
})

let goodsNum = computed(() => {
  let num = 0
  cartData.value.forEach(item => {
    num += item.number
  })
  if (num < 99) {
    return num
  } else {
    return '99+'
  }
})

let goodsPrice = computed(() => {
  let price = 0
  cartData.value.forEach(item => {
    price += (item.number * item.amount)
  })
  return price
})

watch(() => dialogFlavor.value.show, (flag) => {
  if (flag)
    document.querySelector('.divCart').style.zIndex = 1
  else
    document.querySelector('.divCart').style.zIndex = 3000
})

//获取所有的菜品分类
function categoryListApi() {
  return axiosRequest({
    url: '/category/list',
    method: 'get',
  })
}

//获取购物车内商品的集合
function cartListApi(data: any) {
  return axiosRequest({
    url: '/shoppingCart/list',
    //'url': '/front/cartData.json',
    method: 'get',
    params: {...data}
  })
}

async function getDishList() {
  if (!categoryId.value) {
    return
  }

  try {
    let params = {
      categoryId: categoryId.value,
      status: 1
    }

    let r = await axiosRequest({
      url: '/dish/list',
      method: 'get',
      params: {...params}
    })

    if (r.code == 1) {
      let dishListValue = r.data
      let cartDataValue = cartData.value
      if (dishListValue.length > 0 && cartDataValue.length > 0) {
        dishListValue.forEach(dish => {
          cartDataValue.forEach(cart => {
            if (dish.id === cart.dishId) {
              dish.number = cart.number
            }
          })
        })
      }
      dishList.value = dishListValue
    } else
      throw new Error(r.msg)
  } catch (e) {
    showNotify({type: 'warning', message: r.msg});
  }
}

async function getSetMealData() {
  if (!categoryId.value) {
    return
  }

  try {
    let params = {
      categoryId: categoryId.value,
      status: 1
    }

    let r = await axiosRequest({
      url: '/setMeal/list',
      method: 'get',
      params: {...params}
    })

    if (r.code == 1) {
      let dishListValue = r.data
      let cartDataValue = cartData.value
      if (dishListValue.length > 0 && cartDataValue.length > 0) {
        dishListValue.forEach(dish => {
          cartDataValue.forEach(cart => {
            if (dish.id === cart.dishId) {
              dish.number = cart.number
            }
          })
        })
      }
      dishList.value = dishListValue
    } else
      throw new Error(r.msg)
  } catch (e) {
    showNotify({type: 'warning', message: r.msg});
  }
}

async function getCartData() {
  try {
    let r = await axiosRequest({
      url: '/shoppingCart/list',
      method: 'get',
      params: {...{}}
    })

    if (r.code == 1)
      cartData.value = r.data
    else
      throw new Error(r.msg)
  } catch (e) {
    showNotify({type: 'warning', message: r.msg});
  }
}

// 购物车中增加商品数量
async function cartNumAdd(item: any) {
  addCart(item)
}

// 购物车中减少商品数量
async function cartNumberSubtract(item: any) {
  subtractCart(item)
}


//清空购物车
async function clearCart() {
  try {
    let r = await axiosRequest({
      url: '/shoppingCart/clean',
      method: 'delete',
    })

    if (r.code == 1) {
      for (let ele of dishList.value) {
        ele.number = undefined
      }
      cartData.value = []
      cartDialogShow.value = false
    } else
      throw new Error(r.msg)
  } catch (e) {
    showNotify({type: 'warning', message: r.msg});
  }
}

//点击选择规格
function chooseFlavorClick(item) {
  dialogFlavor.value = {
    name: '',
    flavors: [],
    dishId: undefined,
    price: undefined,
    show: false
  }
  dialogFlavor.value = {
    name: item.name,
    flavors: item.flavors,
    dishId: item.id,
    price: item.price,
    show: true,
    image: item.image
  }
}

function flavorClick(flavor, item) {
  flavor.dishFlavor = item
  //强制刷新dialog的dom
  dialogFlavor.value.show = false
  dialogFlavor.value.show = true
}

//选择规格加入购物车
function dialogFlavorAddCart() {
  const dialogFlavorValue = dialogFlavor.value
  let flag = true
  let dishFlavor = []
  dialogFlavorValue.flavors.forEach(item => {
    if (item.dishFlavor) {
      dishFlavor.push(item.dishFlavor)
    } else {
      flag = false
      showNotify({type: 'warning', message: '请选择' + item.name});
    }
  })
  if (flag) {
    addCart({
      price: dialogFlavorValue.price,
      dishFlavor: dishFlavor.join(","),
      id: dialogFlavorValue.dishId,
      flavors: [],
      image: dialogFlavorValue.image,
      name: dialogFlavorValue.name
    })
    dialogFlavor.value.show = false
  }
}

//网络图片路径转换
function imgPathConvert(path: string) {
  return '/common/download?name=' + path
}

//跳转到去结算界面
function toAddOrderPage() {
  if (cartData.value.length > 0) {
    router.push('add-order')
  }
}

function toUserPage() {
  router.push('/user')
}

async function dishDetails(item) {
  //先清除对象数据，如果不行的话dialog使用v-if
  detailsDialog.value.item = {}
  setMealDialog.value.item = {}
  if (Array.isArray(item.flavors)) {
    detailsDialog.value.item = item
    detailsDialog.value.show = true
  } else {
    // 显示套餐的数据
    try {
      let r = await axiosRequest({
        url: `/setMeal/dish/${item.id}`,
        method: 'get',
      })

      if (r.code == 1) {
        setMealDialog.value.item = {...item, list: r.data}
        setMealDialog.value.show = true
      }
      throw new Error(r.msg)
    } catch (e: any) {
      showNotify({type: 'warning', message: r.msg});
    }
  }
}

//菜单中往购物车中添加商品
async function addCart(item: any) {
  let params = {
    amount: item.price / 100,//金额
    dishFlavor: item.dishFlavor,//口味  如果没有传undefined
    dishId: undefined,//菜品id
    setMealId: undefined,//套餐id
    name: item.name,
    image: item.image
  }
  if (Array.isArray(item.flavors)) //表示是菜品
    params.dishId = item.id
  else //表示套餐 套餐没有口味
    params.setMealId = item.id

  try {
    let r = await axiosRequest({
      url: '/shoppingCart/add',
      method: 'post',
      params: params
    })

    if (r.code == 1) {
      dishList.value.forEach(dish => {
        if (dish.id === item.id) {
          dish.number = r.data.number
        }
      })
      if (setMealDialog.value.show)
        item.number = r.data.number

      getCartData()
    } else
      throw new Error(r.msg)
  } catch (e) {
    showNotify({type: 'warning', message: r.msg});
  }
}

//菜单中减少选中的商品
async function subtractCart(item: any) {
  let params = {
    dishId: item.id,
  }
  if (!Array.isArray(item.flavors)) {
    params = {
      setMealId: item.id,
    }
  }

  try {
    let r = await axiosRequest({
      url: '/shoppingCart/sub',
      method: 'post',
      params: params
    })

    if (r.code == 1) {
      dishList.value.forEach(dish => {
        if (dish.id === item.id)
          dish.number = (r.data.number === 0 ? undefined : r.data.number)
      })
      if (setMealDialog.value.show)
        item.number = (r.data.number === 0 ? undefined : r.data.number)
      getCartData()
    } else
      throw new Error(r.msg)
  } catch (e) {
    showNotify({type: 'warning', message: r.msg});
  }
}

//展开购物车
function openCart() {
  if (cartData.value.length > 0)
    cartDialogShow.value = true
}

function initData() {
  Promise.all([categoryListApi(), cartListApi({})]).then(r => {
    //获取分类数据
    if (r[0].code === 1) {
      categoryList.value = r[0].data
      if (Array.isArray(r[0].data) && r[0].data.length > 0) {
        categoryId.value = r[0].data[0].id
        if (r[0].data[0].type === 1)
          getDishList()
        else
          getSetMealData()

      }
    } else {
      showNotify({type: 'warning', message: r[0].msg});
    }
    //获取菜品数据
    if (r[1].code === 1) {
      cartData.value = r[1].data
    } else {
      showNotify({type: 'warning', message: r[1].msg});
    }
  })
}

onMounted(() => {
  initData()
})
</script>

<template>
  <div id="main" class="app">
    <!-- 点菜界面表头 -->
    <div class="divHead">
      <img src="../assets/images/user.png" @click="toUserPage" alt=""/>
    </div>
    <div class="divTitle">
      <div class="divStatic">
        <img src="../assets/images/logo.png" class="logo" alt=""/>
        <div class="divDesc">
          <div class="divName">菩提阁餐厅</div>
          <div class="divSend">
            <span><img src="../assets/images/time.png" alt=""/> 距离1.5km</span>
            <span><img src="../assets/images/money.png" alt=""/> 配送费6元</span>
            <span><img src="../assets/images/location.png" alt=""/> 预计时长12min</span>
          </div>
        </div>
      </div>
      <div class="divDesc">
        简介: 菩提阁中餐厅是菩提阁点餐的独立的品牌，定位“大众 化的美食外送餐饮”，旨为顾客打造专业美食。
      </div>
    </div>

    <div class="divBody">
      <div class="divType">
        <ul>
          <li v-for="(item,index) in categoryList" :key="index" @click="categoryClick(index,item.id, item.type)"
              :class="{active:activeType === index}">{{ item.name }}
          </li>
        </ul>
      </div>
      <div class="divMenu">
        <div>
          <div class="divItem" v-for="(item,index) in dishList" :key="index" @click="dishDetails(item)">
            <el-image :src="imgPathConvert(item.image)">
              <div slot="error" class="image-slot">
                <img src="../assets/images/noImg.png"/>
              </div>
            </el-image>
            <div>
              <div class="divName">{{ item.name }}</div>
              <div class="divDesc">{{ item.description }}</div>
              <div class="divDesc">{{ '月销' + (item.saleNum ? item.saleNum : 0) }}</div>
              <div class="divBottom"><span>￥</span><span>{{ item.price / 100 }}</span></div>
              <div class="divNum">
                <div class="divSubtract" v-if="item.number > 0">
                  <img src="../assets/images/subtract.png" @click.prevent.stop="subtractCart(item)"/>
                </div>
                <div class="divDishNum">{{ item.number }}</div>
                <div class="divTypes" v-if="item.flavors && item.flavors.length > 0 && !item.number "
                     @click.prevent.stop="chooseFlavorClick(item)">选择规格
                </div>
                <div class="divAdd" v-else>
                  <img src="../assets/images/add.png" @click.prevent.stop="addCart(item)"/>
                </div>
              </div>
            </div>
          </div>
        </div>
      </div>
    </div>

    <div class="divLayer">
      <div class="divLayerLeft"></div>
      <div class="divLayerRight"></div>
    </div>
    <div class="divCart" v-if="categoryList.length > 0">
      <div :class="{imgCartActive: cartData && cartData.length > 0, imgCart:!cartData || cartData.length<1}"
           @click="openCart"></div>
      <div :class="{divGoodsNum:1===1, moreGoods:cartData && cartData.length > 99}"
           v-if="cartData && cartData.length > 0">{{ goodsNum }}
      </div>
      <div class="divNum">
        <span>￥</span>
        <span>{{ goodsPrice }}</span>
      </div>
      <div class="divPrice"></div>
      <div :class="{btnSubmitActive: cartData && cartData.length > 0, btnSubmit:!cartData || cartData.length<1}"
           @click="toAddOrderPage">去结算
      </div>
    </div>
    <van-dialog v-model="dialogFlavor.show" :show-confirm-button="false" class="dialogFlavor" ref="flavorDialog">
      <div class="dialogTitle">{{ dialogFlavor.name }}</div>
      <div class="divContent">
        <div v-for="flavor in dialogFlavor.flavors" :key="flavor.id">
          <div class="divFlavorTitle">{{ flavor.name }}</div>
          <span v-for="item in JSON.parse(flavor.value)"
                :key="item"
                @click="flavorClick(flavor,item)"
                :class="{spanActive:flavor.dishFlavor === item}"
          >{{ item }}</span>
        </div>
      </div>
      <div class="divBottom">
        <div><span class="spanMoney">￥</span>{{ dialogFlavor.price / 100 }}</div>
        <div @click="dialogFlavorAddCart">加入购物车</div>
      </div>
      <div class="divFlavorClose" @click="dialogFlavor.show = false">
        <img src="../assets/images/close.png"/>
      </div>
    </van-dialog>
    <van-popup v-model="cartDialogShow" position="bottom" :style="{ height: '50%' }" class="dialogCart">
      <div class="divCartTitle">
        <div class="title">购物车</div>
        <div class="clear" @click="clearCart">
          <i class="el-icon-delete"></i> 清空
        </div>
      </div>
      <div class="divCartContent">
        <div v-for="item in cartData" :key="item.id" class="divCartItem">
          <el-image :src="imgPathConvert(item.image)">
            <div slot="error" class="image-slot">
              <img src="../assets/images/noImg.png"/>
            </div>
          </el-image>
          <div class="divDesc">
            <div class="name">{{ item.name }}</div>
            <div class="price">
              <span class="spanMoney">￥</span>{{ item.amount }}
            </div>
          </div>
          <div class="divNum">
            <div class="divSubtract">
              <img src="../assets/images/subtract.png" @click="cartNumberSubtract(item)"/>
            </div>
            <div class="divDishNum">{{ item.number }}</div>
            <div class="divAdd">
              <img src="../assets/images/add.png" @click="cartNumAdd(item)"/>
            </div>
          </div>
          <div class="divSplit"></div>
        </div>
      </div>
    </van-popup>
    <van-dialog v-model="detailsDialog.show"
                :show-confirm-button="false"
                class="detailsDialog"
                ref="detailsDialog"
                v-if="detailsDialog.show"
    >
      <div class="divContainer">
        <el-image :src="imgPathConvert(detailsDialog.item.image)">
          <div slot="error" class="image-slot">
            <img src="../assets/images/noImg.png"/>
          </div>
        </el-image>
        <div class="title">{{ detailsDialog.item.name }}</div>
        <div class="content">{{ detailsDialog.item.description }}</div>
      </div>
      <div class="divNum">
        <div class="left">
          <span>￥</span><span>{{ detailsDialog.item.price / 100 }}</span>
        </div>
        <div class="right">
          <div class="divSubtract" v-if="detailsDialog.item.number > 0">
            <img src="../assets/images/subtract.png" @click="subtractCart(detailsDialog.item)"/>
          </div>
          <div class="divDishNum">{{ detailsDialog.item.number }}</div>
          <div class="divTypes"
               v-if="detailsDialog.item.flavors && detailsDialog.item.flavors.length > 0 && !detailsDialog.item.number "
               @click="chooseFlavorClick(detailsDialog.item)">选择规格
          </div>
          <div class="divAdd" v-else>
            <img src="../assets/images/add.png" @click="addCart(detailsDialog.item)"/>
          </div>
        </div>
      </div>
      <div class="detailsDialogClose" @click="detailsDialog.show = false">
        <img src="../assets/images/close.png"/>
      </div>
    </van-dialog>
    <van-dialog v-model="setMealDialog.show"
                :show-confirm-button="false"
                class="setMealDetailsDialog"
                ref="setMealDetailsDialogd"
                v-if="setMealDialog.show"
    >
      <div class="divContainer">
        <div class="title">{{ setMealDialog.item.name }}</div>
        <div class="item" v-for="(item,index) in setMealDialog.item.list" :key="index">
          <el-image :src="imgPathConvert(item.image)">
            <div slot="error" class="image-slot">
              <img src="../assets/images/noImg.png"/>
            </div>
          </el-image>
          <div class="divSubTitle">{{ item.name + '(' + item.copies + '份)' }}
            <div class="divPrice">
              <span>￥</span><span>{{ item.price / 100 }}</span>
            </div>
          </div>
          <div class="content">{{ item.description }}</div>
        </div>
      </div>
      <div class="divNum">
        <div class="left">
          <span>￥</span><span>{{ setMealDialog.item.price / 100 }}</span>
        </div>
        <div class="right">
          <div class="divSubtract" v-if="setMealDialog.item.number > 0">
            <img src="../assets/images/subtract.png" @click="subtractCart(setMealDialog.item)"/>
          </div>
          <div class="divDishNum">{{ setMealDialog.item.number }}</div>
          <div class="divAdd" v-if="setMealDialog.item.number">
            <img src="../assets/images/add.png" @click="addCart(setMealDialog.item)"/>
          </div>
          <div class="addCart" @click="addCart(setMealDialog.item)" v-if="!setMealDialog.item.number">加入购物车</div>
        </div>
      </div>
      <div class="detailsDialogClose" @click="setMealDialog.show = false">
        <img src="../assets/images/close.png"/>
      </div>
    </van-dialog>
  </div>
</template>

<style scoped lang="scss">
@use "@/assets/styles/login.scss" as *;
@use "@/assets/styles/main.scss" as *;
</style>